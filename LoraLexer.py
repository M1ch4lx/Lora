# Generated from Lora.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,264,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,
        1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,5,9,135,8,9,10,9,12,9,138,9,9,1,
        10,4,10,141,8,10,11,10,12,10,142,1,11,4,11,146,8,11,11,11,12,11,
        147,1,11,1,11,5,11,152,8,11,10,11,12,11,155,9,11,1,11,1,11,4,11,
        159,8,11,11,11,12,11,160,3,11,163,8,11,1,12,1,12,5,12,167,8,12,10,
        12,12,12,170,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,3,13,183,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,
        16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,
        28,1,28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,
        32,1,33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,
        38,1,38,1,39,1,39,1,40,4,40,250,8,40,11,40,12,40,251,1,40,1,40,1,
        41,1,41,5,41,258,8,41,10,41,12,41,261,9,41,1,41,1,41,0,0,42,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,1,0,6,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,
        9,10,13,13,32,32,2,0,10,10,13,13,273,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,
        0,0,0,3,88,1,0,0,0,5,92,1,0,0,0,7,95,1,0,0,0,9,101,1,0,0,0,11,110,
        1,0,0,0,13,117,1,0,0,0,15,122,1,0,0,0,17,129,1,0,0,0,19,132,1,0,
        0,0,21,140,1,0,0,0,23,162,1,0,0,0,25,164,1,0,0,0,27,182,1,0,0,0,
        29,184,1,0,0,0,31,189,1,0,0,0,33,191,1,0,0,0,35,193,1,0,0,0,37,195,
        1,0,0,0,39,197,1,0,0,0,41,199,1,0,0,0,43,201,1,0,0,0,45,203,1,0,
        0,0,47,205,1,0,0,0,49,207,1,0,0,0,51,209,1,0,0,0,53,212,1,0,0,0,
        55,215,1,0,0,0,57,217,1,0,0,0,59,220,1,0,0,0,61,222,1,0,0,0,63,225,
        1,0,0,0,65,229,1,0,0,0,67,232,1,0,0,0,69,236,1,0,0,0,71,238,1,0,
        0,0,73,240,1,0,0,0,75,242,1,0,0,0,77,244,1,0,0,0,79,246,1,0,0,0,
        81,249,1,0,0,0,83,255,1,0,0,0,85,86,5,105,0,0,86,87,5,102,0,0,87,
        2,1,0,0,0,88,89,5,102,0,0,89,90,5,111,0,0,90,91,5,114,0,0,91,4,1,
        0,0,0,92,93,5,105,0,0,93,94,5,110,0,0,94,6,1,0,0,0,95,96,5,98,0,
        0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,97,0,0,99,100,5,107,0,
        0,100,8,1,0,0,0,101,102,5,102,0,0,102,103,5,117,0,0,103,104,5,110,
        0,0,104,105,5,99,0,0,105,106,5,116,0,0,106,107,5,105,0,0,107,108,
        5,111,0,0,108,109,5,110,0,0,109,10,1,0,0,0,110,111,5,114,0,0,111,
        112,5,101,0,0,112,113,5,116,0,0,113,114,5,117,0,0,114,115,5,114,
        0,0,115,116,5,110,0,0,116,12,1,0,0,0,117,118,5,101,0,0,118,119,5,
        108,0,0,119,120,5,115,0,0,120,121,5,101,0,0,121,14,1,0,0,0,122,123,
        5,105,0,0,123,124,5,109,0,0,124,125,5,112,0,0,125,126,5,111,0,0,
        126,127,5,114,0,0,127,128,5,116,0,0,128,16,1,0,0,0,129,130,5,97,
        0,0,130,131,5,115,0,0,131,18,1,0,0,0,132,136,7,0,0,0,133,135,7,1,
        0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,
        0,0,137,20,1,0,0,0,138,136,1,0,0,0,139,141,7,2,0,0,140,139,1,0,0,
        0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,22,1,0,0,0,
        144,146,7,2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,
        147,148,1,0,0,0,148,149,1,0,0,0,149,153,5,46,0,0,150,152,7,2,0,0,
        151,150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,
        154,163,1,0,0,0,155,153,1,0,0,0,156,158,5,46,0,0,157,159,7,2,0,0,
        158,157,1,0,0,0,159,160,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,
        161,163,1,0,0,0,162,145,1,0,0,0,162,156,1,0,0,0,163,24,1,0,0,0,164,
        168,5,34,0,0,165,167,8,3,0,0,166,165,1,0,0,0,167,170,1,0,0,0,168,
        166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,0,0,0,171,
        172,5,34,0,0,172,26,1,0,0,0,173,174,5,84,0,0,174,175,5,114,0,0,175,
        176,5,117,0,0,176,183,5,101,0,0,177,178,5,70,0,0,178,179,5,97,0,
        0,179,180,5,108,0,0,180,181,5,115,0,0,181,183,5,101,0,0,182,173,
        1,0,0,0,182,177,1,0,0,0,183,28,1,0,0,0,184,185,5,78,0,0,185,186,
        5,111,0,0,186,187,5,110,0,0,187,188,5,101,0,0,188,30,1,0,0,0,189,
        190,5,123,0,0,190,32,1,0,0,0,191,192,5,125,0,0,192,34,1,0,0,0,193,
        194,5,40,0,0,194,36,1,0,0,0,195,196,5,41,0,0,196,38,1,0,0,0,197,
        198,5,91,0,0,198,40,1,0,0,0,199,200,5,93,0,0,200,42,1,0,0,0,201,
        202,5,43,0,0,202,44,1,0,0,0,203,204,5,45,0,0,204,46,1,0,0,0,205,
        206,5,42,0,0,206,48,1,0,0,0,207,208,5,47,0,0,208,50,1,0,0,0,209,
        210,5,61,0,0,210,211,5,61,0,0,211,52,1,0,0,0,212,213,5,33,0,0,213,
        214,5,61,0,0,214,54,1,0,0,0,215,216,5,60,0,0,216,56,1,0,0,0,217,
        218,5,60,0,0,218,219,5,61,0,0,219,58,1,0,0,0,220,221,5,62,0,0,221,
        60,1,0,0,0,222,223,5,62,0,0,223,224,5,61,0,0,224,62,1,0,0,0,225,
        226,5,97,0,0,226,227,5,110,0,0,227,228,5,100,0,0,228,64,1,0,0,0,
        229,230,5,111,0,0,230,231,5,114,0,0,231,66,1,0,0,0,232,233,5,110,
        0,0,233,234,5,111,0,0,234,235,5,116,0,0,235,68,1,0,0,0,236,237,5,
        61,0,0,237,70,1,0,0,0,238,239,5,44,0,0,239,72,1,0,0,0,240,241,5,
        59,0,0,241,74,1,0,0,0,242,243,5,58,0,0,243,76,1,0,0,0,244,245,5,
        46,0,0,245,78,1,0,0,0,246,247,5,9,0,0,247,80,1,0,0,0,248,250,7,4,
        0,0,249,248,1,0,0,0,250,251,1,0,0,0,251,249,1,0,0,0,251,252,1,0,
        0,0,252,253,1,0,0,0,253,254,6,40,0,0,254,82,1,0,0,0,255,259,5,35,
        0,0,256,258,8,5,0,0,257,256,1,0,0,0,258,261,1,0,0,0,259,257,1,0,
        0,0,259,260,1,0,0,0,260,262,1,0,0,0,261,259,1,0,0,0,262,263,6,41,
        0,0,263,84,1,0,0,0,11,0,136,142,147,153,160,162,168,182,251,259,
        1,6,0,0
    ]

class LoraLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    FOR = 2
    IN = 3
    BREAK = 4
    FUNCTION = 5
    RETURN = 6
    ELSE = 7
    IMPORT = 8
    AS = 9
    ID = 10
    INTEGER_VALUE = 11
    FLOAT_VALUE = 12
    STRING_VALUE = 13
    BOOL_VALUE = 14
    NONE = 15
    BLOCK_START = 16
    BLOCK_END = 17
    LPAREN = 18
    RPAREN = 19
    LSQUARE = 20
    RSQUARE = 21
    PLUS = 22
    MINUS = 23
    MULT = 24
    DIV = 25
    EQ = 26
    NEQ = 27
    LT = 28
    LTE = 29
    GT = 30
    GTE = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    COMMA = 36
    SEMI = 37
    COLON = 38
    DOT = 39
    INTEND = 40
    WS = 41
    COMMENT = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'for'", "'in'", "'break'", "'function'", "'return'", 
            "'else'", "'import'", "'as'", "'None'", "'{'", "'}'", "'('", 
            "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", "'!='", 
            "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", "'='", 
            "','", "';'", "':'", "'.'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "FOR", "IN", "BREAK", "FUNCTION", "RETURN", "ELSE", "IMPORT", 
            "AS", "ID", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
            "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", "LPAREN", 
            "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", 
            "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
            "COMMA", "SEMI", "COLON", "DOT", "INTEND", "WS", "COMMENT" ]

    ruleNames = [ "IF", "FOR", "IN", "BREAK", "FUNCTION", "RETURN", "ELSE", 
                  "IMPORT", "AS", "ID", "INTEGER_VALUE", "FLOAT_VALUE", 
                  "STRING_VALUE", "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", 
                  "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", 
                  "MULT", "DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                  "AND", "OR", "NOT", "ASSIGN", "COMMA", "SEMI", "COLON", 
                  "DOT", "INTEND", "WS", "COMMENT" ]

    grammarFileName = "Lora.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


