# Generated from Lora.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,4,
        10,142,8,10,11,10,12,10,143,1,11,4,11,147,8,11,11,11,12,11,148,1,
        11,1,11,5,11,153,8,11,10,11,12,11,156,9,11,1,11,1,11,4,11,160,8,
        11,11,11,12,11,161,3,11,164,8,11,1,12,1,12,5,12,168,8,12,10,12,12,
        12,171,9,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,184,8,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,
        17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,
        23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,
        28,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,
        33,1,33,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,
        38,1,39,1,39,1,40,1,40,5,40,252,8,40,10,40,12,40,255,9,40,1,41,4,
        41,258,8,41,11,41,12,41,259,1,41,1,41,1,42,1,42,5,42,266,8,42,10,
        42,12,42,269,9,42,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,85,43,1,0,6,1,0,48,57,3,0,10,10,13,13,34,34,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,2,
        0,10,10,13,13,281,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,
        0,3,90,1,0,0,0,5,94,1,0,0,0,7,100,1,0,0,0,9,103,1,0,0,0,11,109,1,
        0,0,0,13,118,1,0,0,0,15,125,1,0,0,0,17,130,1,0,0,0,19,137,1,0,0,
        0,21,141,1,0,0,0,23,163,1,0,0,0,25,165,1,0,0,0,27,183,1,0,0,0,29,
        185,1,0,0,0,31,190,1,0,0,0,33,192,1,0,0,0,35,194,1,0,0,0,37,196,
        1,0,0,0,39,198,1,0,0,0,41,200,1,0,0,0,43,202,1,0,0,0,45,204,1,0,
        0,0,47,206,1,0,0,0,49,208,1,0,0,0,51,210,1,0,0,0,53,213,1,0,0,0,
        55,216,1,0,0,0,57,218,1,0,0,0,59,221,1,0,0,0,61,223,1,0,0,0,63,226,
        1,0,0,0,65,230,1,0,0,0,67,233,1,0,0,0,69,237,1,0,0,0,71,239,1,0,
        0,0,73,241,1,0,0,0,75,243,1,0,0,0,77,245,1,0,0,0,79,247,1,0,0,0,
        81,249,1,0,0,0,83,257,1,0,0,0,85,263,1,0,0,0,87,88,5,105,0,0,88,
        89,5,102,0,0,89,2,1,0,0,0,90,91,5,102,0,0,91,92,5,111,0,0,92,93,
        5,114,0,0,93,4,1,0,0,0,94,95,5,119,0,0,95,96,5,104,0,0,96,97,5,105,
        0,0,97,98,5,108,0,0,98,99,5,101,0,0,99,6,1,0,0,0,100,101,5,105,0,
        0,101,102,5,110,0,0,102,8,1,0,0,0,103,104,5,98,0,0,104,105,5,114,
        0,0,105,106,5,101,0,0,106,107,5,97,0,0,107,108,5,107,0,0,108,10,
        1,0,0,0,109,110,5,102,0,0,110,111,5,117,0,0,111,112,5,110,0,0,112,
        113,5,99,0,0,113,114,5,116,0,0,114,115,5,105,0,0,115,116,5,111,0,
        0,116,117,5,110,0,0,117,12,1,0,0,0,118,119,5,114,0,0,119,120,5,101,
        0,0,120,121,5,116,0,0,121,122,5,117,0,0,122,123,5,114,0,0,123,124,
        5,110,0,0,124,14,1,0,0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,
        128,5,115,0,0,128,129,5,101,0,0,129,16,1,0,0,0,130,131,5,105,0,0,
        131,132,5,109,0,0,132,133,5,112,0,0,133,134,5,111,0,0,134,135,5,
        114,0,0,135,136,5,116,0,0,136,18,1,0,0,0,137,138,5,97,0,0,138,139,
        5,115,0,0,139,20,1,0,0,0,140,142,7,0,0,0,141,140,1,0,0,0,142,143,
        1,0,0,0,143,141,1,0,0,0,143,144,1,0,0,0,144,22,1,0,0,0,145,147,7,
        0,0,0,146,145,1,0,0,0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,
        0,0,0,149,150,1,0,0,0,150,154,5,46,0,0,151,153,7,0,0,0,152,151,1,
        0,0,0,153,156,1,0,0,0,154,152,1,0,0,0,154,155,1,0,0,0,155,164,1,
        0,0,0,156,154,1,0,0,0,157,159,5,46,0,0,158,160,7,0,0,0,159,158,1,
        0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,164,1,
        0,0,0,163,146,1,0,0,0,163,157,1,0,0,0,164,24,1,0,0,0,165,169,5,34,
        0,0,166,168,8,1,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,
        0,0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,34,
        0,0,173,26,1,0,0,0,174,175,5,84,0,0,175,176,5,114,0,0,176,177,5,
        117,0,0,177,184,5,101,0,0,178,179,5,70,0,0,179,180,5,97,0,0,180,
        181,5,108,0,0,181,182,5,115,0,0,182,184,5,101,0,0,183,174,1,0,0,
        0,183,178,1,0,0,0,184,28,1,0,0,0,185,186,5,78,0,0,186,187,5,111,
        0,0,187,188,5,110,0,0,188,189,5,101,0,0,189,30,1,0,0,0,190,191,5,
        123,0,0,191,32,1,0,0,0,192,193,5,125,0,0,193,34,1,0,0,0,194,195,
        5,40,0,0,195,36,1,0,0,0,196,197,5,41,0,0,197,38,1,0,0,0,198,199,
        5,91,0,0,199,40,1,0,0,0,200,201,5,93,0,0,201,42,1,0,0,0,202,203,
        5,43,0,0,203,44,1,0,0,0,204,205,5,45,0,0,205,46,1,0,0,0,206,207,
        5,42,0,0,207,48,1,0,0,0,208,209,5,47,0,0,209,50,1,0,0,0,210,211,
        5,61,0,0,211,212,5,61,0,0,212,52,1,0,0,0,213,214,5,33,0,0,214,215,
        5,61,0,0,215,54,1,0,0,0,216,217,5,60,0,0,217,56,1,0,0,0,218,219,
        5,60,0,0,219,220,5,61,0,0,220,58,1,0,0,0,221,222,5,62,0,0,222,60,
        1,0,0,0,223,224,5,62,0,0,224,225,5,61,0,0,225,62,1,0,0,0,226,227,
        5,97,0,0,227,228,5,110,0,0,228,229,5,100,0,0,229,64,1,0,0,0,230,
        231,5,111,0,0,231,232,5,114,0,0,232,66,1,0,0,0,233,234,5,110,0,0,
        234,235,5,111,0,0,235,236,5,116,0,0,236,68,1,0,0,0,237,238,5,61,
        0,0,238,70,1,0,0,0,239,240,5,44,0,0,240,72,1,0,0,0,241,242,5,59,
        0,0,242,74,1,0,0,0,243,244,5,58,0,0,244,76,1,0,0,0,245,246,5,46,
        0,0,246,78,1,0,0,0,247,248,5,9,0,0,248,80,1,0,0,0,249,253,7,2,0,
        0,250,252,7,3,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,
        0,253,254,1,0,0,0,254,82,1,0,0,0,255,253,1,0,0,0,256,258,7,4,0,0,
        257,256,1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,
        260,261,1,0,0,0,261,262,6,41,0,0,262,84,1,0,0,0,263,267,5,35,0,0,
        264,266,8,5,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,
        267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,6,42,0,0,
        271,86,1,0,0,0,11,0,143,148,154,161,163,169,183,253,259,267,1,6,
        0,0
    ]

class LoraLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    FOR = 2
    WHILE = 3
    IN = 4
    BREAK = 5
    FUNCTION = 6
    RETURN = 7
    ELSE = 8
    IMPORT = 9
    AS = 10
    INTEGER_VALUE = 11
    FLOAT_VALUE = 12
    STRING_VALUE = 13
    BOOL_VALUE = 14
    NONE = 15
    BLOCK_START = 16
    BLOCK_END = 17
    LPAREN = 18
    RPAREN = 19
    LSQUARE = 20
    RSQUARE = 21
    PLUS = 22
    MINUS = 23
    MULT = 24
    DIV = 25
    EQ = 26
    NEQ = 27
    LT = 28
    LTE = 29
    GT = 30
    GTE = 31
    AND = 32
    OR = 33
    NOT = 34
    ASSIGN = 35
    COMMA = 36
    SEMI = 37
    COLON = 38
    DOT = 39
    INTEND = 40
    ID = 41
    WS = 42
    COMMENT = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'for'", "'while'", "'in'", "'break'", "'function'", 
            "'return'", "'else'", "'import'", "'as'", "'None'", "'{'", "'}'", 
            "'('", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", 
            "'='", "','", "';'", "':'", "'.'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "FOR", "WHILE", "IN", "BREAK", "FUNCTION", "RETURN", "ELSE", 
            "IMPORT", "AS", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
            "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", "LPAREN", 
            "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", 
            "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
            "COMMA", "SEMI", "COLON", "DOT", "INTEND", "ID", "WS", "COMMENT" ]

    ruleNames = [ "IF", "FOR", "WHILE", "IN", "BREAK", "FUNCTION", "RETURN", 
                  "ELSE", "IMPORT", "AS", "INTEGER_VALUE", "FLOAT_VALUE", 
                  "STRING_VALUE", "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", 
                  "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", 
                  "MULT", "DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                  "AND", "OR", "NOT", "ASSIGN", "COMMA", "SEMI", "COLON", 
                  "DOT", "INTEND", "ID", "WS", "COMMENT" ]

    grammarFileName = "Lora.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


