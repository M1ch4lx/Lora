# Generated from Lora.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,43,272,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,1,1,1,1,1,1,
        1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,
        10,5,10,143,8,10,10,10,12,10,146,9,10,1,11,4,11,149,8,11,11,11,12,
        11,150,1,12,4,12,154,8,12,11,12,12,12,155,1,12,1,12,5,12,160,8,12,
        10,12,12,12,163,9,12,1,12,1,12,4,12,167,8,12,11,12,12,12,168,3,12,
        171,8,12,1,13,1,13,5,13,175,8,13,10,13,12,13,178,9,13,1,13,1,13,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,191,8,14,1,15,
        1,15,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,
        1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,
        1,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,35,
        1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,4,41,
        258,8,41,11,41,12,41,259,1,41,1,41,1,42,1,42,5,42,266,8,42,10,42,
        12,42,269,9,42,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,281,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,1,87,1,0,0,0,
        3,90,1,0,0,0,5,94,1,0,0,0,7,100,1,0,0,0,9,103,1,0,0,0,11,109,1,0,
        0,0,13,118,1,0,0,0,15,125,1,0,0,0,17,130,1,0,0,0,19,137,1,0,0,0,
        21,140,1,0,0,0,23,148,1,0,0,0,25,170,1,0,0,0,27,172,1,0,0,0,29,190,
        1,0,0,0,31,192,1,0,0,0,33,197,1,0,0,0,35,199,1,0,0,0,37,201,1,0,
        0,0,39,203,1,0,0,0,41,205,1,0,0,0,43,207,1,0,0,0,45,209,1,0,0,0,
        47,211,1,0,0,0,49,213,1,0,0,0,51,215,1,0,0,0,53,217,1,0,0,0,55,220,
        1,0,0,0,57,223,1,0,0,0,59,225,1,0,0,0,61,228,1,0,0,0,63,230,1,0,
        0,0,65,233,1,0,0,0,67,237,1,0,0,0,69,240,1,0,0,0,71,244,1,0,0,0,
        73,246,1,0,0,0,75,248,1,0,0,0,77,250,1,0,0,0,79,252,1,0,0,0,81,254,
        1,0,0,0,83,257,1,0,0,0,85,263,1,0,0,0,87,88,5,105,0,0,88,89,5,102,
        0,0,89,2,1,0,0,0,90,91,5,102,0,0,91,92,5,111,0,0,92,93,5,114,0,0,
        93,4,1,0,0,0,94,95,5,119,0,0,95,96,5,104,0,0,96,97,5,105,0,0,97,
        98,5,108,0,0,98,99,5,101,0,0,99,6,1,0,0,0,100,101,5,105,0,0,101,
        102,5,110,0,0,102,8,1,0,0,0,103,104,5,98,0,0,104,105,5,114,0,0,105,
        106,5,101,0,0,106,107,5,97,0,0,107,108,5,107,0,0,108,10,1,0,0,0,
        109,110,5,102,0,0,110,111,5,117,0,0,111,112,5,110,0,0,112,113,5,
        99,0,0,113,114,5,116,0,0,114,115,5,105,0,0,115,116,5,111,0,0,116,
        117,5,110,0,0,117,12,1,0,0,0,118,119,5,114,0,0,119,120,5,101,0,0,
        120,121,5,116,0,0,121,122,5,117,0,0,122,123,5,114,0,0,123,124,5,
        110,0,0,124,14,1,0,0,0,125,126,5,101,0,0,126,127,5,108,0,0,127,128,
        5,115,0,0,128,129,5,101,0,0,129,16,1,0,0,0,130,131,5,105,0,0,131,
        132,5,109,0,0,132,133,5,112,0,0,133,134,5,111,0,0,134,135,5,114,
        0,0,135,136,5,116,0,0,136,18,1,0,0,0,137,138,5,97,0,0,138,139,5,
        115,0,0,139,20,1,0,0,0,140,144,7,0,0,0,141,143,7,1,0,0,142,141,1,
        0,0,0,143,146,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,22,1,0,
        0,0,146,144,1,0,0,0,147,149,7,2,0,0,148,147,1,0,0,0,149,150,1,0,
        0,0,150,148,1,0,0,0,150,151,1,0,0,0,151,24,1,0,0,0,152,154,7,2,0,
        0,153,152,1,0,0,0,154,155,1,0,0,0,155,153,1,0,0,0,155,156,1,0,0,
        0,156,157,1,0,0,0,157,161,5,46,0,0,158,160,7,2,0,0,159,158,1,0,0,
        0,160,163,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,171,1,0,0,
        0,163,161,1,0,0,0,164,166,5,46,0,0,165,167,7,2,0,0,166,165,1,0,0,
        0,167,168,1,0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,
        0,170,153,1,0,0,0,170,164,1,0,0,0,171,26,1,0,0,0,172,176,5,34,0,
        0,173,175,8,3,0,0,174,173,1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,
        0,176,177,1,0,0,0,177,179,1,0,0,0,178,176,1,0,0,0,179,180,5,34,0,
        0,180,28,1,0,0,0,181,182,5,84,0,0,182,183,5,114,0,0,183,184,5,117,
        0,0,184,191,5,101,0,0,185,186,5,70,0,0,186,187,5,97,0,0,187,188,
        5,108,0,0,188,189,5,115,0,0,189,191,5,101,0,0,190,181,1,0,0,0,190,
        185,1,0,0,0,191,30,1,0,0,0,192,193,5,78,0,0,193,194,5,111,0,0,194,
        195,5,110,0,0,195,196,5,101,0,0,196,32,1,0,0,0,197,198,5,123,0,0,
        198,34,1,0,0,0,199,200,5,125,0,0,200,36,1,0,0,0,201,202,5,40,0,0,
        202,38,1,0,0,0,203,204,5,41,0,0,204,40,1,0,0,0,205,206,5,91,0,0,
        206,42,1,0,0,0,207,208,5,93,0,0,208,44,1,0,0,0,209,210,5,43,0,0,
        210,46,1,0,0,0,211,212,5,45,0,0,212,48,1,0,0,0,213,214,5,42,0,0,
        214,50,1,0,0,0,215,216,5,47,0,0,216,52,1,0,0,0,217,218,5,61,0,0,
        218,219,5,61,0,0,219,54,1,0,0,0,220,221,5,33,0,0,221,222,5,61,0,
        0,222,56,1,0,0,0,223,224,5,60,0,0,224,58,1,0,0,0,225,226,5,60,0,
        0,226,227,5,61,0,0,227,60,1,0,0,0,228,229,5,62,0,0,229,62,1,0,0,
        0,230,231,5,62,0,0,231,232,5,61,0,0,232,64,1,0,0,0,233,234,5,97,
        0,0,234,235,5,110,0,0,235,236,5,100,0,0,236,66,1,0,0,0,237,238,5,
        111,0,0,238,239,5,114,0,0,239,68,1,0,0,0,240,241,5,110,0,0,241,242,
        5,111,0,0,242,243,5,116,0,0,243,70,1,0,0,0,244,245,5,61,0,0,245,
        72,1,0,0,0,246,247,5,44,0,0,247,74,1,0,0,0,248,249,5,59,0,0,249,
        76,1,0,0,0,250,251,5,58,0,0,251,78,1,0,0,0,252,253,5,46,0,0,253,
        80,1,0,0,0,254,255,5,9,0,0,255,82,1,0,0,0,256,258,7,4,0,0,257,256,
        1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,
        1,0,0,0,261,262,6,41,0,0,262,84,1,0,0,0,263,267,5,35,0,0,264,266,
        8,5,0,0,265,264,1,0,0,0,266,269,1,0,0,0,267,265,1,0,0,0,267,268,
        1,0,0,0,268,270,1,0,0,0,269,267,1,0,0,0,270,271,6,42,0,0,271,86,
        1,0,0,0,11,0,144,150,155,161,168,170,176,190,259,267,1,6,0,0
    ]

class LoraLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    IF = 1
    FOR = 2
    WHILE = 3
    IN = 4
    BREAK = 5
    FUNCTION = 6
    RETURN = 7
    ELSE = 8
    IMPORT = 9
    AS = 10
    ID = 11
    INTEGER_VALUE = 12
    FLOAT_VALUE = 13
    STRING_VALUE = 14
    BOOL_VALUE = 15
    NONE = 16
    BLOCK_START = 17
    BLOCK_END = 18
    LPAREN = 19
    RPAREN = 20
    LSQUARE = 21
    RSQUARE = 22
    PLUS = 23
    MINUS = 24
    MULT = 25
    DIV = 26
    EQ = 27
    NEQ = 28
    LT = 29
    LTE = 30
    GT = 31
    GTE = 32
    AND = 33
    OR = 34
    NOT = 35
    ASSIGN = 36
    COMMA = 37
    SEMI = 38
    COLON = 39
    DOT = 40
    INTEND = 41
    WS = 42
    COMMENT = 43

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'if'", "'for'", "'while'", "'in'", "'break'", "'function'", 
            "'return'", "'else'", "'import'", "'as'", "'None'", "'{'", "'}'", 
            "'('", "')'", "'['", "']'", "'+'", "'-'", "'*'", "'/'", "'=='", 
            "'!='", "'<'", "'<='", "'>'", "'>='", "'and'", "'or'", "'not'", 
            "'='", "','", "';'", "':'", "'.'", "'\\t'" ]

    symbolicNames = [ "<INVALID>",
            "IF", "FOR", "WHILE", "IN", "BREAK", "FUNCTION", "RETURN", "ELSE", 
            "IMPORT", "AS", "ID", "INTEGER_VALUE", "FLOAT_VALUE", "STRING_VALUE", 
            "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", "LPAREN", 
            "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", "MULT", "DIV", 
            "EQ", "NEQ", "LT", "LTE", "GT", "GTE", "AND", "OR", "NOT", "ASSIGN", 
            "COMMA", "SEMI", "COLON", "DOT", "INTEND", "WS", "COMMENT" ]

    ruleNames = [ "IF", "FOR", "WHILE", "IN", "BREAK", "FUNCTION", "RETURN", 
                  "ELSE", "IMPORT", "AS", "ID", "INTEGER_VALUE", "FLOAT_VALUE", 
                  "STRING_VALUE", "BOOL_VALUE", "NONE", "BLOCK_START", "BLOCK_END", 
                  "LPAREN", "RPAREN", "LSQUARE", "RSQUARE", "PLUS", "MINUS", 
                  "MULT", "DIV", "EQ", "NEQ", "LT", "LTE", "GT", "GTE", 
                  "AND", "OR", "NOT", "ASSIGN", "COMMA", "SEMI", "COLON", 
                  "DOT", "INTEND", "WS", "COMMENT" ]

    grammarFileName = "Lora.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


